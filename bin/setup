#!/bin/bash
# -*- mode: Shell-script;-*-

ME=`basename $0`

# default settings
HOME_DEFAULT="andy.henroid@ahenroid.corp.puppetlabs.net:/Users/andy.henroid"
BUILD_DEFAULT="leatherman cpp-hocon facter puppet puppet-agent hiera"
PUPPET_DEFAULT="agent"
RUBY_DEFAULT="2.3.1 2.2.5 2.1.10"
CMAKE_DEFAULT="3.6.0"
GETTEXT_DEFAULT="0.19.8"
GITHUB_USER="ahenroid"
GITHUB_HOME="https://github.com/$GITHUB_USER"
GITHUB_PUPPET="https://github.com/puppetlabs"
GITHUB_PUPPET2="git://github.com/puppetlabs"

# rehome script if necessary
BASE=`dirname $0`
if [[ "$BASE" = "./home/bin" || "$BASE" = "home/bin" ]]; then
    if [[ ! -d $HOME/.git && -d ./home/.git ]]; then
        echo "$ME: moved repository to $HOME"
        mv ./home/* ./home/.[a-z]* . || exit $?
        rmdir ./home || exit $?
        exec $HOME/bin/$ME $* || exit $?
    fi
fi

#
# Parse command line options
#
while true; do
    opt=$1
    val=`echo "$opt" | awk -F= '{print $2}' | sed -e 's/,/ /g'`
    if [ -n "$val" ]; then
        opt=`echo "$opt" | awk -F= '{print $1}'`
    elif [[ "$opt" =~ ^(-[a-z])(.+)$ ]]; then
        opt=${BASH_REMATCH[1]}
        val=${BASH_REMATCH[2]}
    fi

    case "$opt" in
        -k|--keys) OPT_KEYS=${val:-"?"} ;;
        -r|--ruby) OPT_RUBY=${val:-$RUBY_DEFAULT} ;;
        -f|--fetch) OPT_FETCH=${val:-"."} ;;
        -b|--build) OPT_BUILD=${val:-"."} ;;
        -x|--rebuild) OPT_REBUILD=${val:-"."} ;;
        -u|--update) OPT_UPDATE=${val:-"."} ;;
        -j|--jbuild) OPT_JBUILD=${val:-"."} ;;
        -b|--btest) OPT_BTEST=${val:-"."} ;;
        -p|--puppet) OPT_PUPPET=${val:-$PUPPET_DEFAULT} ;;
        -q|--quiet) OPT_QUIET="1" ;;
        -v|--verbose) OPT_VERBOSE="1" ;;
        -*)
            if [[ "$opt" != "-h" && "$opt" != "--help" ]]; then
                echo "$ME: unrecognized option or format \`$opt'"
            fi
            echo "Usage: $ME [OPTIONS]"
            echo " -k|--keys=USER@HOST:/PATH          Fetch SSH keys"
            echo " -r|--ruby[=VERSION,VERSION,...]    Build ruby"
            echo " -f|--fetch[=PROJ|PATH][:BRANCH]    Fetch projects"
            echo " -b|--build[=PROJ|PATH][:BRANCH]    Build projects"
            echo " -x|--rebuild[=PROJ|PATH][:BRANCH]  Rebuild projects"
            echo " -u|--update[=PROJ|PATH][:BRANCH]   Update repositories"
            echo " -j|--jbuild[=PROJ|PATH][:BRANCH]   Init puppet-agent build"
            echo " -t|--test[=PROJ|PATH][:BRANCH]     Init beaker tests"
            echo " -p|--puppet[=agent|server]         Install puppet"
            echo " -v|--verbose"
            echo " -q|--quiet"
            echo " -h|--help"
            if [[ "$opt" = "-h" || "$opt" = "--help" ]]; then
                echo
                echo "Examples:"
                echo "  $ME -k                # show home location"
                echo "  $ME -r?               # list available ruby versions"
                echo "  $ME -r=2.3.1          # install ruby version"
                echo "  $ME -f=facter:?       # list facter branches"
                echo "  $ME -f=facter:master  # fetch facter master"
                echo "  $ME -b=facter:master  # build facter master"
                echo "  $ME -x=facter:master  # rebuild facter master"
                echo "  $ME -u=facter         # update facter repo"
            fi
            exit 1
            ;;
        *) break ;;
    esac
    OPTS+="$1"
    shift
done

# check sudo permission
if [[ $EUID -ne 0 ]]; then sudo echo -n; fi

#
# Determine remote HOME
#
if [[ "$OPT_KEYS" != "?" ]]; then
    OPT_HOME=$OPT_KEYS
fi
if [ -z "$OPT_HOME" ]; then
    OPT_HOME=`sudo netstat -tapen 2> /dev/null | grep EST | grep ssh | \
              awk 'NR==1{print $5}' | awk -F: '{print $1}'`
fi
if [ -z "`echo "$OPT_HOME" | awk -F@ '{print $2}'`" ]; then
    OPT_HOME="`echo "$HOME_DEFAULT" | awk -F@ '{print $1}'`@${OPT_HOME}"
fi
if [ -z "`echo "$OPT_HOME" | awk -F:/ '{print $2}'`" ]; then
    OPT_HOME="${OPT_HOME}:/Users/`echo \"$OPT_HOME\" | awk -F@ '{print $1}'`"
fi
if [[ "$OPT_KEYS" = "?" ]]; then
    echo "$OPT_HOME"
    exit 1
fi

#
# Fetch SSH keys
#
if [ ! -d "$HOME/.ssh" ]; then mkdir -m 0700 "$HOME/.ssh"; fi
for f in .ssh/id_rsa .ssh/config .ssh/id_rsa-acceptance .netrc; do
    if [ ! -f "$HOME/$f" ]; then
        echo "$ME: fetching $f..."
        scp -q -oStrictHostKeyChecking=no ${OPT_HOME}/$f "$HOME/`dirname $f`"/ || break
        chmod 600 "$HOME/$f"
        chown ${USER}.${USER} "$HOME/$f"
    fi
done

# determine package manager
PKGMGR="apt-get -qqy"
if [ -f /etc/redhat-release ]; then
    if [ -x /usr/bin/dnf ]; then
        PKGMGR="dnf -qy"
    else
        PKGMGR="yum -q -y"
    fi
fi

#
# Update packages
#
if [ -z "$OPTS" ]; then
    echo -n "$ME: checking installed packages..."
    if [ -f /etc/redhat-release ]; then
        # Fedora, Redhat
        PKG+="gcc-c++ git wget"
        PKG+=" openssl-devel readline-devel zlib-devel"
        PKG+=" boost-devel libcurl-devel yaml-cpp-devel"
        PKG+=" emacs-nox gdb valgrind screen"
    else
        # Debian, Ubuntu
        PKG+="build-essential git wget"
        PKG+=" libboost-all-dev libssl-dev libyaml-dev libyaml-cpp-dev"
        PKG+=" libcurl4-openssl-dev ruby-dev libreadline-dev"
        PKG+=" emacs-nox gdb valgrind screen"
    fi
    sudo $PKGMGR update > /dev/null
    sudo $PKGMGR install $PKG > /dev/null
    echo
fi

#
# Install Ruby versions
#
for ruby in $OPT_RUBY; do
    # display available versions
    if [[ "$ruby" = "?" ]]; then
        if [ -d "$HOME/.rbenv/versions" ]; then
            ver0=`cat "$HOME/.rbenv/version"`
            for ver in `ls "$HOME/.rbenv/versions"`; do
                if [[ "$ver" = "$ver0" ]]; then
                    echo "* $ver"
                else
                    echo "  $ver"
                fi
            done
        fi
        continue
    fi

    # install rbenv
    if [ ! -d "$HOME/.rbenv" ]; then
        echo "$ME: installing rbenv"
        git clone -q https://github.com/rbenv/rbenv.git "$HOME/.rbenv" || exit $?
        git clone -q https://github.com/rbenv/ruby-build.git "$HOME/.rbenv/plugins/ruby-build" || exit $?
        pushd "$HOME/.rbenv" > /dev/null
        src/configure > /dev/null || exit $?
        make -C src > /dev/null || exit $?
        popd > /dev/null
    fi

    # build Ruby version
    if [ ! -d "$HOME/.rbenv/versions/$ruby" ]; then
        echo -n "$ME: installing Ruby $ruby..."
        export RUBY_CONFIGURE_OPTS="--enable-shared"
        "$HOME/.rbenv/bin/rbenv" install $ruby > /dev/null || exit $?
        echo
    fi
    
    if [ ! -d "$HOME/proj/ruby/ruby-$ruby" ]; then
        echo "$ME: installing Ruby $ruby source"
        if [ ! -d "$HOME/proj/ruby" ]; then mkdir -p "$HOME/proj/ruby"; fi
        pushd "$HOME/proj/ruby" > /dev/null
        verbase=`echo $ruby | awk -F. '{printf "%d.%d", $1, $2}'`
        wget -q https://cache.ruby-lang.org/pub/ruby/$verbase/ruby-$ruby.tar.bz2 || exit $?
        bunzip2 -c ruby-$ruby.tar.bz2 | tar xf - || exit $?
        rm ruby-$ruby.tar.bz2
        popd > /dev/null
    fi
    
    echo "$ME: configuring Ruby $ruby"
    "$HOME/.rbenv/bin/rbenv" global $ruby || exit $?
    export PATH="$HOME/.rbenv/shims:${PATH}"
    for pkg in bundler rdoc; do
        if ! gem list --local | grep -q "$pkg"; then
            echo "$ME: installing $pkg"
            gem install $pkg > /dev/null || exit $?
        fi
    done
    if [ -d "$HOME/proj/puppet" ]; then
        pushd "$HOME/proj/puppet" > /dev/null
        bundle install > /dev/null || exit $?
        popd > /dev/null
    fi
    
    # configure Ruby
    if [[ "`echo $OPT_RUBY | awk -F' ' '{print $1}'`" = "$ruby" ]]; then
        echo "$ME: set to Ruby $VER0"
        "$HOME/.rbenv/bin/rbenv" global $VER0
    fi
done

#
# Fetch, build, rebuild, or update repo
#
for proj in $OPT_FETCH $OPT_BUILD $OPT_REBUILD $OPT_UPDATE; do
    # display available projects
    if [[ "$proj" = "?" || "$proj" = "?:?" ]]; then
        for p in $BUILD_DEFAULT; do
            if [ -d "$HOME/proj/$p/.git" ]; then
                echo "* $p"
            else
                echo "- $p"
            fi
        done
        for p in `ls "$HOME/proj"`; do
            if [ -d "$HOME/proj/$p/.git" ]; then
                found=""
                for p2 in $BUILD_DEFAULT; do
                    if [[ "$p2" = "$p" ]]; then
                        found="YES"
                        break
                    fi
                done
                if [ -z "$found" ]; then
                    echo "+ $p"
                fi
            fi
        done
        continue
    fi

    # determine repo path
    projbranch=`echo "$proj" | awk -F: '{print $2}'`
    proj=`echo "$proj" | awk -F: '{print $1}'`
    if [[ "$proj" = "." ]]; then
        projdir=`git rev-parse --show-toplevel` || exit 1
    elif [[ "$proj" =~ ^/.*$ ]]; then
        projdir="$proj"
    elif [[ "$proj" =~ ^\./.*$ ]]; then
        projdir=`echo "$proj" | sed -e 's/^\.\///'`
        projdir="`realpath .`/$projdir"
    else
        projdir="$HOME/proj/$proj"
    fi
    proj=`basename "$projdir"`
    projdir=`dirname "$projdir"`

    # setup repo
    if [ ! -d "$projdir/$proj" ]; then
        echo "$ME: cloning $proj"
        if [ ! -d "$projdir" ]; then
            mkdir -p "$projdir" || exit $?
        fi
        pushd "$projdir" > /dev/null
        git clone -q "$GITHUB_HOME/$proj" > /dev/null || exit $?
        cd $proj || exit $?
        git remote add upstream "$GITHUB_PUPPET/$proj" || exit $?
        popd > /dev/null
    fi

    # display available branches
    if [[ "$projbranch" = "?" ]]; then
        git --git-dir="$projdir/$proj/.git" branch \
            | while read line; do
                  active=" "
                  branch=`echo "$line" | awk '{print $1}'`
                  if [[ "$branch" = "*" ]]; then
                      active="*"
                      branch=`echo "$line" | awk '{print $2}'`
                  fi
                  sha=`git --git-dir="$projdir/$proj/.git" rev-parse $branch`
                  echo "$sha $active($branch)"
              done
        continue
    fi

    # fetch branch
    if [[ -n "$projbranch" ]]; then
        echo "$ME: fetching $proj ($projbranch)"
        pushd "$projdir/$proj" > /dev/null
        if ! out=`git fetch origin "$projbranch" 2>&1`; then
            echo $out
            exit 1
        fi
        branch=`git rev-parse --abbrev-ref HEAD`
        if [[ "$branch" != "$projbranch" ]]; then
            if [[ "`git status -s`" = "" ]]; then
                git checkout "$projbranch" > /dev/null 2>&1 || exit $?
            else
                echo "$ME: modified files exist; remaining on ($branch)"
            fi
        fi
        popd > /dev/null
    fi

    # update repo
    if [ -n "$OPT_UPDATE" ]; then
        echo "$ME: updating $proj"
        pushd $projdir/$proj > /dev/null
        git fetch upstream || exit $?
        branch=`git rev-parse --abbrev-ref HEAD`
        if [[ "$branch" != "master" ]]; then
            git checkout master || exit $?
        fi
        git merge upstream/master || exit $?
        git push origin master || exit $?
        if [[ "$branch" != "master" ]]; then
            git checkout "$branch"
        fi
        popd > /dev/null
    fi

    if [[ -n "$OPT_BUILD" || -n "$OPT_REBUILD" ]]; then
        # check cmake
        CMAKE_EXE=$(which cmake 2> /dev/null)
        CMAKE_NOW=""
        if [ -x "$CMAKE_EXE" ]; then
            CMAKE_NOW=`${CMAKE_EXE} --version 2>/dev/null | awk '/ version / {print $3}'`
        fi
        if [[ "${CMAKE_NOW}" < "${CMAKE_DEFAULT}" ]]; then
            if [ ! -d "$HOME/proj/cmake" ]; then mkdir -p "$HOME/proj/cmake"; fi
            CMAKE_DIR="cmake-${CMAKE_DEFAULT}-`uname -s`-`uname -m`"
            CMAKE_DIR=`echo ${CMAKE_DIR} | sed -e 's/i686/i386/'`
            if [ ! -d "$HOME/proj/cmake/${CMAKE_DIR}" ]; then
                echo -n "$ME: downloading cmake ${CMAKE_DEFAULT}..."
                pushd "$HOME/proj/cmake" > /dev/null
                scp -q -oStrictHostKeyChecking=no ${OPT_HOME}/down/${CMAKE_DIR}.tar.gz /dev/stdout | tar xfz - || exit $?
                echo
                popd > /dev/null
            fi
            
            if [ -d "$HOME/proj/cmake/${CMAKE_DIR}" ]; then
                pushd "$HOME/proj/cmake/${CMAKE_DIR}" > /dev/null
                echo -n "$ME: installing cmake ${CMAKE_DEFAULT}..."
                sudo find bin share/cmake-* -type f -exec install -D -o root -g root {} /usr/{} \;
                echo
                popd > /dev/null
            fi
        fi
        
        # check gettext
        if [ -f /etc/redhat-release ] && grep -q CentOS /etc/redhat-release; then
            if ! xgettext --add-location=file /dev/null 2> /dev/null; then
                if [ ! -d "$HOME/proj/gettext" ]; then mkdir -p "$HOME/proj/gettext"; fi
                GETTEXT_DIR="gettext-${GETTEXT_DEFAULT}"
                GETTEXT_PKG="${GETTEXT_DIR}-`uname -s`-`uname -m`.tar.gz"
                if [ ! -d "$HOME/proj/gettext/${GETTEXT_DIR}" ]; then
                    echo -n "$ME: downloading gettext ${GETTEXT_DEFAULT}..."
                    pushd "$HOME/proj/gettext" > /dev/null
                    scp -q -oStrictHostKeyChecking=no ${OPT_HOME}/down/${GETTEXT_PKG} /dev/stdout | tar xfz - || exit $?
                    echo
                    popd > /dev/null
                fi
                
                if [ -d "$HOME/proj/gettext/${GETTEXT_DIR}" ]; then
                    echo -n "$ME: installing gettext ${GETTEXT_DEFAULT}..."
                    pushd "$HOME/proj/gettext/${GETTEXT_DIR}" > /dev/null
                    sudo make install > /dev/null
                    sudo mv /usr/lib/libgettext* /usr/lib64/
                    echo
                    popd > /dev/null
                fi
            fi
        fi
    fi

    # remove old build
    if [ -n "$OPT_REBUILD" ] && [ -d "$projdir/$proj/build" ]; then
        rm -rf "$projdir/$proj/build.old" || exit $?
        mv "$projdir/$proj/build" "$projdir/$proj/build.old" || exit $?
    fi
    
    # build repo
    if [[ -n "$OPT_BUILD" || -n "$OPT_REBUILD" ]]; then
        if [ -f "$projdir/$proj/CMakeLists.txt" ]; then
            branch=`git --git-dir="$projdir/$proj/.git" rev-parse --abbrev-ref HEAD`
            echo "$ME: building $proj ($branch)..."
            if [ ! -f "$projdir/$proj/build/CMakeCache.txt" ]; then
                CMAKE_FLAGS="-DCMAKE_BUILD_TYPE=Debug"
                if [ -f /opt/pl-build-tools/lib/libboost_container.so ]; then
                    CMAKE_FLAGS+=" -DBOOST_ROOT=/opt/pl-build-tools"
                fi
                if [ -f /opt/pl-build-tools/lib/libyaml-cpp.so ]; then
                    CMAKE_FLAGS+=" -DYAMLCPP_LIBRARY=/opt/pl-build-tools/lib/libyaml-cpp.so"
                    CMAKE_FLAGS+=" -DYAMLCPP_INCLUDE_DIR=/opt/pl-build-tools/include/yaml-cpp"
                fi
                mkdir -p $projdir/$proj/build || exit $?
                pushd $projdir/$proj/build > /dev/null
                cmake ${CMAKE_FLAGS} .. > /dev/null || exit $?
                popd > /dev/null
            fi

            pushd $projdir/$proj/build > /dev/null
            if [ -n "$OPT_VERBOSE" ]; then
                make -j3 VERBOSE=1 || exit $?
            elif [ -n "$OPT_QUIET" ]; then
                make -j3 > /dev/null || exit $?
            else
                make -j3 || exit $?
            fi
            if [[ "$proj" = "leatherman" || "$proj" = "cpp-hocon" ]]; then
                sudo make install > /dev/null || exit $?
            fi
            popd > /dev/null
        fi
    fi
done

#
# Init puppet-agent build
#
for proj in $OPT_JBUILD; do
    # display available builds
    if [[ "$proj" = "?" ]]; then
        wget -qO- builds.puppetlabs.lan/puppet-agent \
            | grep "^<a href=" \
            | sed -e "s/<[^>]\+> */ /g" \
            | awk -F"[ :-/]" '{printf "%s-%s-%s %s:%s %s\n", $5, $4, $6, $7, $8, $2}' \
            | while read line; do
                  date=`echo "$line" | awk '{print $1}'`
                  time=`echo "$line" | awk '{print $2}'`
                  hash=`echo "$line" | awk '{print $3}'`
                  echo "`date -d $date +'%m/%d/%Y'` $time $hash"
              done \
            | sort -b -k 1.9,1.10 -k 1.1,1.2 -k 1.4,1.5 -k 2.1,2.2 -k 2.4,2.5
        continue
    fi

    # determine repo details
    projbranch=`echo "$proj" | awk -F: '{print $2}'`
    proj=`echo "$proj" | awk -F: '{print $1}'`
    if [[ "$proj" = "." ]]; then
        projdir=`git rev-parse --show-toplevel` || exit 1
    elif [[ "$proj" =~ ^/.*$ ]]; then
        projdir="$proj"
    elif [[ "$proj" =~ ^\./.*$ ]]; then
        projdir=`echo "$proj" | sed -e 's/^\.\///'`
        projdir="`realpath .`/$projdir"
    else
        projdir="$HOME/proj/$proj"
    fi
    proj=`basename "$projdir"`
    projdir=`dirname "$projdir"`
    if [[ -z "$projbranch" ]] && [ -d "$projdir/$proj/.git" ]; then
        projbranch=`git --git-dir="$projdir/$proj/.git" rev-parse --abbrev-ref HEAD`
    else
        projbranch="master"
    fi
    sha=`git --git-dir="$projdir/$proj/.git" rev-parse $projbranch` || exit $?
    ssha=`git --git-dir="$projdir/$proj/.git" rev-parse --short $projbranch` || exit $?
    echo "$ME: building $proj $ssha ($projbranch)"

    # update puppet-agent
    agentdir="$HOME/proj/puppet-agent"
    agentbranch="build-$proj-$ssha"
    if [ ! -d "$agentdir/.git" ]; then
        echo "$ME: cannot find puppet-agent"
        exit 1
    fi
    agentcfg="$agentdir/configs/components/$proj.json"
    if [ ! -f "$agentcfg" ]; then
        echo "$ME: cannot find puppet-agent/*/$proj.json"
        exit 1
    fi
    pushd "$agentdir" > /dev/null
    echo "$ME: creating puppet-agent ($agentbranch)"
    if ! out=`git checkout master 2>&1`; then
        echo $out
        exit 1
    fi
    git branch -D "$agentbranch" > /dev/null 2>&1
    if ! out=`git checkout -b "$agentbranch" 2>&1`; then
        echo $out
        exit 1
    fi
    echo "{\"url\": \"$GITHUB_PUPPET2/$proj.git\", \"ref\": \"$sha\"}" > $agentcfg || exit $?
    git add $agentcfg > /dev/null 2>&1
    git commit -m $agentbranch > /dev/null 2>&1
    if ! out=`git push origin $agentbranch 2>&1`; then
        if ! out=`git push origin $agentbranch -f 2>&1`; then
            echo $out
            exit 1
        fi
    fi
    popd > /dev/null
    
    # display instructions
    echo "URL: https://jenkins.puppetlabs.com/view/puppet-agent/view/ad%20hoc/job/platform_puppet-agent_init-van-int_suite-manual-ad-hoc/build?delay=0sec"
    echo "TEST_TARGETS:  redhat7-64a windows2012r2-64a"
    echo "BUILD_TARGETS: ubuntu-14.04-amd64 el-7-x86_64 windows-2012r2-x86"
    echo "GITHUB_USER:   $GITHUB_USER"
    echo "GITHUB_REF:    $agentbranch"
done

#
# Install puppet
#
if [[ -n "$OPT_PUPPET" && ! -d "/opt/puppetlabs/bin" ]]; then
    if [ -f /etc/os-release ]; then
        for rel in xenial wily vivid utopic trusty precise jessie wheezy; do
            if grep -q $rel /etc/os-release; then
                PKG="puppetlabs-release-pc1-${rel}.deb"
                CMD="wget -q https://apt.puppetlabs.com/${PKG}"
                CMD+=";sudo dpkg -i ${PKG}"
                break
            fi
        done
    elif [ -f /etc/redhat-release ]; then
        for rel in 23 22 21 20 7 6 5; do
            if grep -q "Fedora release ${rel} " /etc/redhat-release; then
                PKG="puppetlabs-release-pc1-fedora-${rel}.noarch.rpm"
                CMD="wget -q https://yum.puppetlabs.com/${PKG}"
                CMD+=";sudo rpm -Uvh ${PKG}"
                break
            elif grep -q "Linux release ${rel}\." /etc/redhat-release; then
                PKG="puppetlabs-release-pc1-el-${rel}.noarch.rpm"
                CMD="wget -q https://yum.puppetlabs.com/${PKG}"
                CMD+=";sudo rpm -Uvh ${PKG}"
                break
            fi
        done
    fi

    if [ -n "$CMD" ]; then
        echo "$ME: installing Puppet ($OPT_PUPPET)"
        CMD+=";rm -f ${PKG}"
        CMD+=";sudo $PKGMGR update"
        for pkg in $OPT_PUPPET; do
            case "$pkg" in
                agent) pkg=puppet-agent ;;
                server) pkg=puppetserver ;;
            esac
            CMD+=";sudo $PKGMGR install $pkg"
        done
        eval $CMD || exit $?
    fi
fi
