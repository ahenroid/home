#!/bin/bash
# -*- mode: Shell-script;-*-

ME=`basename $0`

# default settings
BUILD_DEFAULT="leatherman facter puppet"
CMAKE_DEFAULT="3.2.2"
RUBY_DEFAULT="2.3.1 2.2.5 2.1.10"
PUPPET_DEFAULT="4.5.2"
KEYS_DEFAULT="andy.henroid@ahenroid.corp.puppetlabs.net:/Users/andy.henroid"

# rehome if necessary
BASE=`dirname $0`
if [[ "$BASE" = "./home/bin" || "$BASE" = "home/bin" ]]; then
    if [[ ! -d ~/.git && -d ./home/.git ]]; then
	echo "$ME: moved repository to $HOME"
	mv ./home/* ./home/.[a-z]* . && rmdir ./home && exec ~/bin/$ME $*
    fi
fi

# parse command line options
while true; do
    VALS=`echo "$1" | awk -F= '{print $2}' | sed -e 's/,/ /g'`
    case "$1" in
	-r|--ruby) OPT_RUBY=$RUBY_DEFAULT ;;
	-r=*|--ruby=*) OPT_RUBY=$VALS ;;
	-b|--build) OPT_BUILD=$BUILD_DEFAULT ;;
	-b=*|--build=*) OPT_BUILD=$VALS ;;
	-x|--rebuild) OPT_REBUILD=$BUILD_DEFAULT ;;
	-x=*|--rebuild=*) OPT_REBUILD=$VALS ;;
	-u|--update) OPT_UPDATE=$BUILD_DEFAULT ;;
	-u=*|--update=*) OPT_UPDATE=$VALS ;;
	-p|--puppet) OPT_PUPPET=$PUPPET_DEFAULT ;;
	-p=*|--puppet=*) OPT_PUPPET=$VALS ;;
	-k|--keys) OPT_KEYS=$KEYS_DEFAULT ;;
	-k=*|--keys=*) OPT_KEYS=$VALS ;;
	-*)
	    if [[ "$1" != "-h" && "$1" != "--help" ]]; then
		echo "$ME: unrecognized option \`$1'"
	    fi
	    echo "Usage: $ME [OPTIONS]"
	    echo " -r|--ruby[=VERSION,VERSION,...]         Build Ruby"
	    echo " -b|--build[=facter|leatherman]          Build projects"
	    echo " -x|--rebuild[=facter|leatherman]        Rebuild projects"
	    echo " -u|--update[=facter|leatherman|puppet]  Update repositories"
	    echo " -p|--puppet[=VERSION]                   Install Puppet"
	    echo " -k|--keys[=USER@HOST]                   Fetch SSH keys"
	    echo " -h|--help"
	    exit 1
	    ;;
	*) break ;;
    esac
    shift
done

# check sudo permission
if [[ $EUID -ne 0 ]]; then
    echo -n "$ME: checking sudo permission..."
    sudo echo
fi

# fetch ssh keys & .netrc
if [ -n "$OPT_KEYS" ]; then
    if [ -z "`echo "$OPT_KEYS" | awk -F@ '{print $2}'`" ]; then
	OPT_KEYS=`echo "$OPT_KEYS" | awk -F@ '{print $1}'`
	OPT_KEYS="`echo "$KEYS_DEFAULT" | awk -F@ '{print $1}'`@${OPT_KEYS}"
    fi
    if [ -z "`echo "$OPT_KEYS" | awk -F:/ '{print $2}'`" ]; then
	OPT_KEYS="${OPT_KEYS}:/Users/`echo \"$OPT_KEYS\" | awk -F@ '{print $1}'`"
    fi
    
    if [ ! -d ~/.ssh ]; then mkdir ~/.ssh; fi
    for f in .ssh/id_rsa .ssh/config .ssh/id_rsa-acceptance .netrc; do
	if [ ! -f "$HOME/$f" ]; then
	    echo -n "$ME: fetching $f..."
	    scp -oStrictHostKeyChecking=no ${OPT_KEYS}/$f $HOME/`dirname $f`/ || break
	    chmod 600 "$HOME/$f"
	fi
    done
fi

if [[ -z "$OPT_RUBY" && -z "$OPT_BUILD"  && -z "$OPT_REBUILD" ]]; then
    # update packages
    if [ -f /etc/redhat-release ]; then
	if [ -x /usr/bin/dnf ]; then
	    PKGMGR="dnf -qy"
	else
	    PKGMGR="yum -q -y"
	fi
    else
	PKGMGR="apt-get -qqy"
    fi
    echo -n "$ME: checking installed packages..."
    if [ -f /etc/redhat-release ]; then
	# Fedora, Redhat
	PKG+="gcc-c++ cmake git wget"
	PKG+=" openssl-devel readline-devel zlib-devel"
	PKG+=" boost-devel libcurl-devel yaml-cpp-devel"
	PKG+=" emacs-nox gdb valgrind"
	sudo $PKGMGR update > /dev/null
	sudo $PKGMGR install $PKG > /dev/null
    else
	# Debian, Ubuntu
	PKG+="build-essential cmake git wget"
	PKG+=" libboost-all-dev libssl-dev libyaml-dev libyaml-cpp-dev"
	PKG+=" libcurl4-openssl-dev ruby-dev libreadline-dev"
	PKG+=" emacs-nox gdb valgrind"
	sudo $PKGMGR update > /dev/null
	sudo $PKGMGR install $PKG > /dev/null
    fi
    echo
fi

if [ -n "$OPT_RUBY" ]; then
    # install rbenv
    if [ ! -d ~/.rbenv ]; then
	echo "$ME: installing rbenv"
	git clone -q https://github.com/rbenv/rbenv.git ~/.rbenv
	git clone -q https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
	cd ~/.rbenv
	src/configure > /dev/null && make -C src > /dev/null
    fi

    # build various Ruby versions
    for ver in $OPT_RUBY; do
	if [ ! -d ~/.rbenv/versions/$ver ]; then
	    echo -n "$ME: installing Ruby $ver..."
	    export RUBY_CONFIGURE_OPTS="--enable-shared"
	    ~/.rbenv/bin/rbenv install $ver > /dev/null
	    echo
	fi
	
	if [ ! -d ~/proj/ruby/ruby-$ver ]; then
	    echo "$ME: installing Ruby $ver source"
	    if [ ! -d ~/proj/ruby ]; then mkdir -p ~/proj/ruby; fi
	    cd ~/proj/ruby
	    verbase=`echo $ver | awk -F. '{printf "%d.%d", $1, $2}'`
	    wget -q https://cache.ruby-lang.org/pub/ruby/$verbase/ruby-$ver.tar.bz2 \
		&& bunzip2 -c ruby-$ver.tar.bz2 | tar xf - \
		&& rm ruby-$ver.tar.bz2
	fi
	
	echo "$ME: configuring Ruby $ver"
	~/.rbenv/bin/rbenv global $ver || break
	for pkg in bundler rdoc; do
	    if ! gem list --local | grep -q "$pkg"; then
		echo "$ME: installing $pkg"
		gem install $pkg > /dev/null
	    fi
	done
	if [ -d ~/proj/puppet ]; then
	    cd ~/proj/puppet
	    bundle install > /dev/null
	fi
    done

    # configure to use first Ruby version
    VER0=`echo $OPT_RUBY | awk -F' ' '{print $1}'`
    echo "$ME: set to Ruby $VER0"
    ~/.rbenv/bin/rbenv global $VER0
fi

if [[ -n "$OPT_BUILD" || -n "$OPT_REBUILD" ]]; then
    if [ -z "$OPT_BUILD" ]; then
	OPT_BUILD=$OPT_REBUILD
    fi

    # setup repos
    for proj in $OPT_BUILD; do
	if [ ! -d ~/proj/$proj ]; then
	    echo "$ME: cloning $proj"
	    if [ ! -d ~/proj ]; then mkdir ~/proj; fi
	    cd ~/proj
	    git clone -q https://github.com/ahenroid/$proj > /dev/null \
		&& cd $proj \
		&& git remote add upstream https://github.com/puppetlabs/$proj
	fi
    done

    # setup cmake
    CMAKE_EXE=$(which cmake)
    CMAKE_NOW=""
    if [ -x "$CMAKE_EXE" ]; then
	CMAKE_NOW=`$CMAKE_EXE --version | awk '/ version / {print $3}'`
    fi
    if [[ "$CMAKE_NOW" < "${CMAKE_DEFAULT}" ]]; then
	if [ ! -d ~/proj/cmake ]; then mkdir -p ~/proj/cmake; fi
	CMAKE_BASE=`echo "${CMAKE_DEFAULT}" | awk -F. '{printf "%u.%u", $1, $2}'`
	if [ ! -d ~/proj/cmake/cmake-${CMAKE_DEFAULT} ]; then
	    echo -n "$ME: downloading cmake ${CMAKE_DEFAULT}..."
	    cd ~/proj/cmake
	    wget --quiet --no-check-certificate https://www.cmake.org/files/v${CMAKE_BASE}/cmake-${CMAKE_DEFAULT}.tar.gz \
		&& tar xf cmake-${CMAKE_DEFAULT}.tar.gz > /dev/null \
		&& rm cmake-${CMAKE_DEFAULT}.tar.gz
	    echo
	fi
	    
	echo -n "$ME: building cmake ${CMAKE_DEFAULT}..."
	cd ~/proj/cmake/cmake-${CMAKE_DEFAULT} \
	    && ./configure --prefix=/usr > /dev/null \
	    && make all > /dev/null \
	    && sudo make install > /dev/null
	echo
    fi
    
    for proj in $OPT_BUILD; do
	if [[ "$proj" = "puppet" ]]; then continue; fi

	if [ -n "$OPT_REBUILD" ]; then
	    rm -rf ~/proj/$proj/build
	fi
	
	if [ ! -d ~/proj/$proj/build ]; then
	    echo "$ME: building $proj..."
	    mkdir ~/proj/$proj/build
	    cd ~/proj/$proj/build
	    cmake -DCMAKE_BUILD_TYPE=Debug .. > /dev/null && make
	    if [[ "$proj" = "leatherman" ]]; then
		sudo make install > /dev/null
	    fi
	fi
    done
fi

if [ -n "$OPT_UPDATE" ]; then
    for proj in $OPT_UPDATE; do
	if [ -d ~/proj/$proj ]; then
	    echo "$ME: updating $proj"
	    cd ~/proj/$proj
	    git fetch upstream \
		&& git checkout master \
		&& git merge upstream/master \
		&& git push origin master
	fi
    done
fi

if [ -n "$OPT_PUPPET" ]; then
    if [ ! -d "/opt/puppetlabs/bin" ]; then
	echo "$ME: installing Puppet $OPT_PUPPET"
	# XXX
    fi
fi
