#!/bin/bash
# -*- mode: Shell-script;-*-

ME=`basename $0`

USER=andy.henroid
DEPT=engineering
PROJ=cloud-and-future-tech
CIDR="10.100.0.0/16 10.100.10.0/24:us-west-2a 10.100.20.0/24:us-west-2b 10.100.30.0/24:us-west-2c"
AMI=ami-d2c924b2:centos
TAGS="Key=created_by,Value=$USER Key=department,Value=$DEPT Key=project,Value=$PROJ"
FILTERS="Name=tag:created_by,Values='$USER' Name=tag:project,Values='$PROJ'"

#
# Parse command line options
#
while true; do
    opt=$1
    val=`echo "$opt" | awk -F= '{print $2}' | sed -e 's/,/ /g'`
    if [ -n "$val" ]; then
        opt=`echo "$opt" | awk -F= '{print $1}'`
    fi
    OPTS+="$1"
    shift

    case "$opt" in
        -i|--install) OPT_INSTALL=1 ;;
        -u|--uninstall) OPT_UNINSTALL=1 ;;
        -t|--test) OPT_TEST=1 ;;
        -*)
            if [[ "$opt" != "-h" && "$opt" != "--help" ]]; then
                echo "$ME: unrecognized option or format \`$opt'"
            fi
            echo "Usage: $ME [OPTIONS]"
            echo " -i|--install"
            echo " -u|--uninstall"
            echo " -t|--test"
            echo " -h|--help"
            exit 1
            ;;
        *) break ;;
    esac
done

#
# Setup cached values
#
vpc="vpc-730c0217"
sg="sg-884196f1 sg-4a499e33"
sub="subnet-10dded74 subnet-83511af5 subnet-507df208"
igw="igw-ad3598c9"
rtb="rtb-85824de2"

#
# Install
#
if [ -n "$OPT_INSTALL" ]; then
    echo "$ME: installing..."

    cidr0=`echo "$CIDR" | awk -F: '{print $1}'`
    vpc=`aws ec2 create-vpc --cidr-block $cidr0 --query 'Vpc.VpcId' --output text`
    aws ec2 create-tags --tags Key=Name,Value="cft-vpc" $TAGS --resources $vpc
    echo "$ME: created $vpc"
    
    sg=`aws ec2 create-security-group --group-name cft-master --description 'AWS image development and test' --vpc-id $vpc --query 'GroupId' --output text`
    aws ec2 create-tags --tags $TAGS --resources $sg
    echo "$ME: created $sg"
    aws ec2 authorize-security-group-ingress --group-id $sg --protocol tcp --port 22 --cidr 0.0.0.0/0
    aws ec2 authorize-security-group-ingress --group-id $sg --protocol tcp --port 443 --cidr 0.0.0.0/0
    aws ec2 authorize-security-group-ingress --group-id $sg --protocol tcp --port 8140 --cidr $cidr0
    aws ec2 authorize-security-group-ingress --group-id $sg --protocol tcp --port 8142 --cidr $cidr0
    aws ec2 authorize-security-group-ingress --group-id $sg --protocol tcp --port 8143 --cidr $cidr0
    aws ec2 authorize-security-group-ingress --group-id $sg --protocol tcp --port 61613 --cidr $cidr0

    sg2=`aws ec2 create-security-group --group-name cft-agents --description 'AWS image development and test' --vpc-id $vpc --query 'GroupId' --output text`
    sg="$sg $sg2"
    aws ec2 create-tags --tags $TAGS --resources $sg2
    echo "$ME: created $sg2"
    aws ec2 authorize-security-group-ingress --group-id $sg2 --protocol tcp --port 22 --cidr 0.0.0.0/0
    
    igw=`aws ec2 create-internet-gateway --query 'InternetGateway.InternetGatewayId' --output text`
    aws ec2 create-tags --tags Key=Name,Value=cft-igw $TAGS --resources $igw
    echo "$ME: created $igw"
    aws ec2 attach-internet-gateway --internet-gateway-id $igw --vpc-id $vpc

    rtb=`aws ec2 create-route-table --vpc-id $vpc --query 'RouteTable.RouteTableId' --output text`
    aws ec2 create-tags --tags Key=Name,Value=cft-rtb $TAGS --resources $rtb
    echo "$ME: created $rtb"
    aws ec2 create-route --route-table-id $rtb --destination-cidr-block 0.0.0.0/0 --gateway-id $igw > /dev/null

    sub=""
    for cidr in $CIDR; do
        azone=`echo "$cidr" | awk -F: '{print $2}'`
        cidr=`echo "$cidr" | awk -F: '{print $1}'`
        if [ -n "$azone" ]; then
            sid=`aws ec2 create-subnet --vpc-id $vpc --cidr-block $cidr --availability-zone $azone --query 'Subnet.SubnetId' --output text`
            sub="${sub}${sid} "
            aws ec2 create-tags --tags Key=Name,Value=cft-$azone $TAGS --resources $sid
            echo "$ME: created $sid"
            aws ec2 associate-route-table --subnet-id $sid --route-table-id $rtb > /dev/null
            aws ec2 modify-subnet-attribute --subnet-id $sid --map-public-ip-on-launch
        fi
    done
else
    #
    # Retrieve resource IDs
    #
    vpc=`aws ec2 describe-vpcs --filters $FILTERS --query 'Vpcs[*].VpcId' --output text`
    sg=`aws ec2 describe-security-groups --filters $FILTERS --query 'SecurityGroups[*].GroupId' --output text`
    sub=`aws ec2 describe-subnets --filters $FILTERS --query 'Subnets[*].SubnetId' --output text`
    igw=`aws ec2 describe-internet-gateways --filters $FILTERS --query 'InternetGateways[*].InternetGatewayId' --output text`
    rtb=`aws ec2 describe-route-tables --filters $FILTERS --query 'RouteTables[*].RouteTableId' --output text`
fi

#
# Create test instance
#
if [ -n "$OPT_TEST" ]; then
    user=`echo "$AMI" | awk -F: '{print $2}'`
    if [ -z "$user" ]; then user=root; fi
    ami=`echo "$AMI" | awk -F: '{print $1}'`
    sgt=`echo "$sg" | awk '{print $1}'`
    subt=`echo "$sub" | awk '{print $1}'`
    inst=`aws ec2 run-instances --image-id $ami --count 1 --instance-type t2.micro --key-name $USER --security-group-ids $sgt --subnet-id $subt --query 'Instances[0].InstanceId' --output text`
    if [ $? -ne 0 ]; then exit $?; fi
    aws ec2 create-tags --tags Key=Name,Value="cft-test" $TAGS --resources $inst
    ip=`aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --output text --instance-ids $inst`
    echo "$ME: started $inst @ $ip"
    echo "$ME: connect: ssh -i ~/.aws/*.pem ${user}@$ip"
    echo "$ME: terminate: aws ec2 terminate-instances --instance-ids $inst"
fi

#
# Show resources
#
if [ -z "$OPTS" ]; then
    for id in $vpc; do
        nm=`aws ec2 describe-vpcs --vpc-id $id --query 'Vpcs[*].Tags[?Key==\`Name\`].Value' --output text`
        echo "$id | $nm"
    done
    for id in $sg; do
        nm=`aws ec2 describe-security-groups --group-id $id --query 'SecurityGroups[*].GroupName' --output text`
        echo "$id | $nm"
    done
    for id in $sub; do
        nm=`aws ec2 describe-subnets --subnet-id $id --query 'Subnets[*].Tags[?Key==\`Name\`].Value' --output text`
        echo "$id | $nm"
    done
    for id in $igw; do
        nm=`aws ec2 describe-internet-gateways --internet-gateway-ids $id --query 'InternetGateways[*].Tags[?Key==\`Name\`].Value' --output text`
        echo "$id | $nm"
    done
    for id in $rtb; do
        nm=`aws ec2 describe-route-tables --route-table-ids $id --query 'RouteTables[*].Tags[?Key==\`Name\`].Value' --output text`
        echo "$id | $nm"
    done

    inst=`aws ec2 describe-instances --filters $FILTERS --query 'Reservations[*].Instances[*].InstanceId' --output text`
    if [[ $inst != "None" ]]; then
        for id in $inst; do
            nm=`aws ec2 describe-instances --instance-ids $id --query 'Reservations[*].Instances[*].Tags[?Key==\`Name\`].Value' --output text`
            state=`aws ec2 describe-instances --instance-ids $id --query 'Reservations[*].Instances[*].State.Name' --output text`
            echo "$id | $nm ($state)"
        done
    fi
fi

#
# Uninstall
#
if [ -n "$OPT_UNINSTALL" ]; then
    echo "$ME: uninstalling..."
    inst=`aws ec2 describe-instances --filters $FILTERS --query 'Reservations[*].Instances[*].InstanceId' --output text`
    if [[ $inst != "None" ]]; then
        for id in $inst; do
            echo "$ME: terminating $id"
            aws ec2 terminate-instances --instance-ids $id
        done
    fi

    for id in $rtb; do
        atbl=`aws ec2 describe-route-tables --route-table-ids $id --filters $FILTERS --query 'RouteTables[*].Associations[*].RouteTableAssociationId' --output text`
        for asc in $atbl; do
            echo "$ME: destroying $asc"
            aws ec2 disassociate-route-table --association-id $asc
        done
        echo "$ME: destroying $id"
        aws ec2 delete-route-table --route-table-id $id
    done

    for id in $sub; do
        echo "$ME: destroying $id"
        aws ec2 delete-subnet --subnet-id $id
    done

    for id in $igw; do
        vid=`aws ec2 describe-internet-gateways --internet-gateway-id $id --query 'InternetGateways[*].Attachments[*].VpcId' --output text`
        echo "$ME: destroing $id"
        aws ec2 detach-internet-gateway --internet-gateway-id $id --vpc-id $vid
        aws ec2 delete-internet-gateway --internet-gateway-id $id
    done

    for id in $sg; do
        echo "$ME: destroying $id"
        aws ec2 delete-security-group --group-id $id
    done

    for id in $vpc; do
        echo "$ME: destroying $id"
        aws ec2 delete-vpc --vpc-id $id
    done
fi

exit 0

